{"ast":null,"code":"var _jsxFileName = \"/Users/dzennetahydyrova/board-project2/board-project/src/containers/boards/Boards.js\";\nimport React, { useState, useEffect } from \"react\";\nimport db from \"../../firebaseConfig\";\nimport Board from \"../../components/board/Board\";\nimport BoardsForm from \"../../components/boardForm/BoardForm\";\n\nconst BoardsContainer = () => {\n  const [boards, setBoards] = useState([]); // const [fetchBoardData, setFetchData] = useState(0);\n  //it console.logs now random string. it means that we don't assign newly generated id to board id\n  //I added something random to see how it behaves, because doc() doesn't accept empty string as an arg\n  // const docId = db.collection(\"boards\").doc().id;\n  // db.collection(\"boards\")\n  //   .orderBy(\"title\")\n  //   .onSnapshot((snapshot) => {\n  //     let changes = snapshot.docChanges();\n  //     setBoards(\n  //       changes.map((change) => {\n  //         return change.doc.data();\n  //       })\n  //     );\n  //   });\n\n  useEffect(() => {\n    fetchBoardsData = async () => {\n      const boardsResponse = await db.collection(\"boards\").get();\n      const boardsData = boardsResponse.docs.map(board => board.data());\n      setBoards(boardsData);\n      console.log(boardsResponse);\n    };\n\n    fetchBoardsData();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BoardsForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, boards.map(el => {\n    return /*#__PURE__*/React.createElement(Board, {\n      key: el.id,\n      boardTitle: el.title,\n      boardsItems: el.items,\n      boardsId: el.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    });\n  }))); //   db.collection(\"cities\").doc(\"SF\")\n  //     .onSnapshot(function(doc) {\n  //         console.log(\"Current data: \", doc.data());\n  //     });\n};\n\nexport default BoardsContainer;\n/* <h3>{el.title}</h3> */\n//           {/* <Board oneBoard={el} /> */}\n//           {/* {el.items.map((item) => {\n//             return <p>{item}</p>;\n//           })} */}\n// <div key={index + el}>{el}</div>\n// db.collection('collection')\n// .onSnapshot((snapshot) => {\n//     snapshot.docChanges().forEach((change) => {\n//         const payload = {\n//             id: change.doc.id,\n//             data: change.doc.data(),\n//         };\n//         ...... some action\n//     });\n// });\n// useEffect(() => {\n//   async function fetchBoardsData() {\n//     // const boardsResponse = await db.collection(\"boards\").get();\n//     // const boardsData = boardsResponse.docs.map((board) => board.data());\n//     // setBoards(boardsData);\n//     // console.log(boardsResponse);\n//     db.collection(\"boards\")\n//       .orderBy(\"name\")\n//       .onSnapshot(function (doc) {\n//         console.log(\"Current data: \", doc.data());\n//       });\n//   }\n//   fetchBoardsData();\n// }, [fetchBoardData]);\n//add if i am missing smth\n//I will edit the same way i watched on youtube\n//oki doki\n// console.log(\"boards\", boards);\n//   <Card border=\"info\" style={{ width: '18rem' }}>\n//   <Card.Header>Header</Card.Header>\n//   <Card.Body>\n//     <Card.Title>Info Card Title</Card.Title>\n//     <Card.Text>\n//       Some quick example text to build on the card title and make up the bulk\n//       of the card's content.\n//     </Card.Text>\n//   </Card.Body>\n// </Card>\n// console.log(\"boards\", boards.id)","map":{"version":3,"sources":["/Users/dzennetahydyrova/board-project2/board-project/src/containers/boards/Boards.js"],"names":["React","useState","useEffect","db","Board","BoardsForm","BoardsContainer","boards","setBoards","fetchBoardsData","boardsResponse","collection","get","boardsData","docs","map","board","data","console","log","el","id","title","items"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,sBAAf;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,UAAP,MAAuB,sCAAvB;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAC5B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC,CAD4B,CAE5B;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,eAAe,GAAG,YAAY;AAC5B,YAAMC,cAAc,GAAG,MAAMP,EAAE,CAACQ,UAAH,CAAc,QAAd,EAAwBC,GAAxB,EAA7B;AACA,YAAMC,UAAU,GAAGH,cAAc,CAACI,IAAf,CAAoBC,GAApB,CAAyBC,KAAD,IAAWA,KAAK,CAACC,IAAN,EAAnC,CAAnB;AACAT,MAAAA,SAAS,CAACK,UAAD,CAAT;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYT,cAAZ;AACD,KALD;;AAMAD,IAAAA,eAAe;AAChB,GARQ,EAQN,EARM,CAAT;AAUA,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,MAAM,CAACQ,GAAP,CAAYK,EAAD,IAAQ;AAClB,wBACE,oBAAC,KAAD;AACE,MAAA,GAAG,EAAEA,EAAE,CAACC,EADV;AAEE,MAAA,UAAU,EAAED,EAAE,CAACE,KAFjB;AAGE,MAAA,WAAW,EAAEF,EAAE,CAACG,KAHlB;AAIE,MAAA,QAAQ,EAAEH,EAAE,CAACC,EAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD,GATA,CADH,CAJF,CADF,CA9B4B,CAkD5B;AACA;AACA;AACA;AACD,CAtDD;;AAwDA,eAAef,eAAf;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport db from \"../../firebaseConfig\";\nimport Board from \"../../components/board/Board\";\nimport BoardsForm from \"../../components/boardForm/BoardForm\";\n\nconst BoardsContainer = () => {\n  const [boards, setBoards] = useState([]);\n  // const [fetchBoardData, setFetchData] = useState(0);\n\n  //it console.logs now random string. it means that we don't assign newly generated id to board id\n  //I added something random to see how it behaves, because doc() doesn't accept empty string as an arg\n\n  // const docId = db.collection(\"boards\").doc().id;\n\n  // db.collection(\"boards\")\n  //   .orderBy(\"title\")\n  //   .onSnapshot((snapshot) => {\n  //     let changes = snapshot.docChanges();\n  //     setBoards(\n  //       changes.map((change) => {\n  //         return change.doc.data();\n  //       })\n  //     );\n  //   });\n\n  useEffect(() => {\n    fetchBoardsData = async () => {\n      const boardsResponse = await db.collection(\"boards\").get();\n      const boardsData = boardsResponse.docs.map((board) => board.data());\n      setBoards(boardsData);\n      console.log(boardsResponse);\n    };\n    fetchBoardsData();\n  }, []);\n\n  return (\n    <>\n      <div>\n        <BoardsForm />\n      </div>\n      <div>\n        {boards.map((el) => {\n          return (\n            <Board\n              key={el.id}\n              boardTitle={el.title}\n              boardsItems={el.items}\n              boardsId={el.id}\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n\n  //   db.collection(\"cities\").doc(\"SF\")\n  //     .onSnapshot(function(doc) {\n  //         console.log(\"Current data: \", doc.data());\n  //     });\n};\n\nexport default BoardsContainer;\n\n/* <h3>{el.title}</h3> */\n\n//           {/* <Board oneBoard={el} /> */}\n//           {/* {el.items.map((item) => {\n//             return <p>{item}</p>;\n//           })} */}\n\n// <div key={index + el}>{el}</div>\n\n// db.collection('collection')\n// .onSnapshot((snapshot) => {\n//     snapshot.docChanges().forEach((change) => {\n//         const payload = {\n//             id: change.doc.id,\n//             data: change.doc.data(),\n//         };\n\n//         ...... some action\n//     });\n// });\n\n// useEffect(() => {\n//   async function fetchBoardsData() {\n//     // const boardsResponse = await db.collection(\"boards\").get();\n//     // const boardsData = boardsResponse.docs.map((board) => board.data());\n//     // setBoards(boardsData);\n//     // console.log(boardsResponse);\n\n//     db.collection(\"boards\")\n//       .orderBy(\"name\")\n\n//       .onSnapshot(function (doc) {\n//         console.log(\"Current data: \", doc.data());\n//       });\n//   }\n//   fetchBoardsData();\n// }, [fetchBoardData]);\n\n//add if i am missing smth\n//I will edit the same way i watched on youtube\n//oki doki\n\n// console.log(\"boards\", boards);\n\n//   <Card border=\"info\" style={{ width: '18rem' }}>\n//   <Card.Header>Header</Card.Header>\n//   <Card.Body>\n//     <Card.Title>Info Card Title</Card.Title>\n//     <Card.Text>\n//       Some quick example text to build on the card title and make up the bulk\n//       of the card's content.\n//     </Card.Text>\n//   </Card.Body>\n// </Card>\n// console.log(\"boards\", boards.id)\n"]},"metadata":{},"sourceType":"module"}