{"ast":null,"code":"var _jsxFileName = \"/Users/dzennetahydyrova/board-project2/board-project/src/containers/boards/BoardsContainer.js\";\nimport React, { useState, useEffect } from \"react\";\nimport db from \"../../firebaseConfig\";\nimport Board from \"../../components/board/Board\";\nimport BoardsForm from \"../../components/boardForm/BoardForm\";\nimport { Container } from \"react-bootstrap\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nconst BoardsContainer = () => {\n  const [boards, setBoards] = useState([// {\n    //   title: \"\",\n    //   items: [],\n    // },\n  ]);\n  useEffect(() => {\n    return db.collection(\"boards\").onSnapshot(snapshot => {\n      // const boardData = [];\n      snapshot.docChanges().forEach(change => {\n        if (change.type === \"added\") {\n          setBoards(prevBoards => [...prevBoards, { ...change.doc.data(),\n            id: change.doc.id\n          }]);\n        }\n\n        if (change.type === \"modified\") {\n          console.log(change.doc.data(), change.doc.id);\n          setBoards(prevBoards => {\n            const newArrBoards = [...prevBoards];\n            let index = newArrBoards.findIndex(el => el.id === change.doc.id);\n            console.log(index);\n\n            if (index !== -1) {\n              newArrBoards[index] = { ...change.doc.data(),\n                id: change.doc.id\n              };\n            }\n\n            return newArrBoards;\n          });\n        }\n\n        if (change.type === \"removed\") {\n          setBoards(prevBoards => {\n            const newArrBoards = [...prevBoards];\n            let index = newArrBoards.findIndex(el => el.id === change.doc.id);\n\n            if (index !== -1) {\n              newArrBoards.splice(index, 1);\n              console.log(newArrBoards);\n            }\n\n            return newArrBoards;\n          });\n        }\n      });\n    });\n  }, []);\n  console.log(boards);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BoardsForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, boards.map(el => {\n    return /*#__PURE__*/React.createElement(Board, {\n      key: el.id,\n      boardTitle: el.title,\n      boardsItems: el.items ? el.items : [],\n      boardsId: el.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    });\n  }))));\n};\n\nexport default BoardsContainer;","map":{"version":3,"sources":["/Users/dzennetahydyrova/board-project2/board-project/src/containers/boards/BoardsContainer.js"],"names":["React","useState","useEffect","db","Board","BoardsForm","Container","Row","Col","BoardsContainer","boards","setBoards","collection","onSnapshot","snapshot","docChanges","forEach","change","type","prevBoards","doc","data","id","console","log","newArrBoards","index","findIndex","el","splice","map","title","items"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport db from \"../../firebaseConfig\";\nimport Board from \"../../components/board/Board\";\nimport BoardsForm from \"../../components/boardForm/BoardForm\";\nimport { Container } from \"react-bootstrap\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nconst BoardsContainer = () => {\n  const [boards, setBoards] = useState([\n    // {\n    //   title: \"\",\n    //   items: [],\n    // },\n  ]);\n\n  useEffect(() => {\n    return db.collection(\"boards\").onSnapshot((snapshot) => {\n      // const boardData = [];\n      snapshot.docChanges().forEach((change) => {\n        if (change.type === \"added\") {\n          setBoards((prevBoards) => [\n            ...prevBoards,\n            { ...change.doc.data(), id: change.doc.id },\n          ]);\n        }\n        if (change.type === \"modified\") {\n          console.log(change.doc.data(), change.doc.id);\n          setBoards((prevBoards) => {\n            const newArrBoards = [...prevBoards];\n            let index = newArrBoards.findIndex((el) => el.id === change.doc.id);\n            console.log(index);\n            if (index !== -1) {\n              newArrBoards[index] = {\n                ...change.doc.data(),\n                id: change.doc.id,\n              };\n            }\n            return newArrBoards;\n          });\n        }\n        if (change.type === \"removed\") {\n          setBoards((prevBoards) => {\n            const newArrBoards = [...prevBoards];\n            let index = newArrBoards.findIndex((el) => el.id === change.doc.id);\n\n            if (index !== -1) {\n              newArrBoards.splice(index, 1);\n\n              console.log(newArrBoards);\n            }\n            return newArrBoards;\n          });\n        }\n      });\n    });\n  }, []);\n\n  console.log(boards);\n  return (\n    <div>\n      <Container>\n        <Row>\n          <Col>\n            <BoardsForm />\n          </Col>\n        </Row>\n        <Row>\n          {boards.map((el) => {\n            return (\n              <Board\n                key={el.id}\n                boardTitle={el.title}\n                boardsItems={el.items ? el.items : []}\n                boardsId={el.id}\n              />\n            );\n          })}\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default BoardsContainer;\n"]},"metadata":{},"sourceType":"module"}