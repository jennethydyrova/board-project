{"ast":null,"code":"var _jsxFileName = \"/Users/dzennetahydyrova/board-project2/board-project/src/containers/boards/BoardsContainer.js\";\nimport React, { useState, useEffect } from \"react\";\nimport db from \"../../firebaseConfig\";\nimport Board from \"../../components/board/Board\";\nimport BoardsForm from \"../../components/boardForm/BoardForm\";\nimport { Container } from \"react-bootstrap\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"antd/dist/antd.css\";\nimport { Card } from \"antd\";\nimport Loading from \"../../components/board/Loading\";\nimport { byTitle, byTitleD, byDate, byDateD } from \"../../functions\";\n\nconst BoardsContainer = () => {\n  const [boards, setBoards] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [sortedBy, setSortedBy] = useState(\"title\");\n  useEffect(() => {\n    return db.collection(\"boards\").orderBy(sortedBy).onSnapshot(snapshot => {\n      if (snapshot.docChanges().length === 0) {\n        setIsLoading(false);\n      }\n\n      snapshot.docChanges().forEach(change => {\n        if (change.type === \"added\") {\n          setBoards(prevBoards => [...prevBoards, { ...change.doc.data(),\n            id: change.doc.id\n          }]);\n          setIsLoading(false);\n        }\n\n        if (change.type === \"modified\") {\n          setBoards(prevBoards => {\n            const newArrBoards = [...prevBoards];\n            let index = newArrBoards.findIndex(el => el.id === change.doc.id);\n\n            if (index !== -1) {\n              newArrBoards[index] = { ...change.doc.data(),\n                id: change.doc.id\n              };\n            }\n\n            return newArrBoards;\n          });\n          setIsLoading(false);\n        }\n\n        if (change.type === \"removed\") {\n          setBoards(prevBoards => {\n            const newArrBoards = [...prevBoards];\n            let index = newArrBoards.findIndex(el => el.id === change.doc.id);\n\n            if (index !== -1) {\n              newArrBoards.splice(index, 1);\n            }\n\n            return newArrBoards;\n          });\n        }\n      });\n    });\n  }, []);\n  useEffect(() => {\n    switch (sortedBy) {\n      case \"title\":\n        setBoards(boards.sort(byTitle));\n        break;\n\n      case \"dTitle\":\n        setBoards(boards.sort(byTitleD));\n        break;\n\n      case \"date\":\n        setBoards(boards.sort(byDate));\n        break;\n\n      case \"dDate\":\n        setBoards(boards.sort(byDateD));\n        break;\n\n      default:\n        setBoards(boards.sort(byDateD));\n    }\n  }, [sortedBy]); // const noData = () => {\n  //   if (boards.length === 0) {\n  //     setIsLoading(null)\n  //   }\n  // }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, \" */}\", /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, boards.map(el => {\n    return /*#__PURE__*/React.createElement(Board, {\n      key: el.id,\n      boardTitle: el.title,\n      boardsItems: el.items ? el.items : [],\n      boardsId: el.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 15\n      }\n    });\n  })));\n};\n\nexport default BoardsContainer; // function byTitle( a, b ) {\n//   if ( a.title < b.title ){\n//     return -1;\n//   }\n//   if ( a.title > b.title){\n//     return 1;\n//   }\n//   return 0;\n// }\n// function byTitleD( a, b ) {\n//   if ( a.title < b.title ){\n//     return 1;\n//   }\n//   if ( a.title > b.title){\n//     return -1;\n//   }\n//   return 0;\n// }\n// function byDate( a, b ) {\n//   if ( a.date < b.date ){\n//     return -1;\n//   }\n//   if ( a.date > b.date){\n//     return 1;\n//   }\n//   return 0;\n// }\n// function byDateD( a, b ) {\n//   if ( a.date < b.date ){\n//     return 1;\n//   }\n//   if ( a.date > b.date){\n//     return -1;\n//   }\n//   return 0;\n// }","map":{"version":3,"sources":["/Users/dzennetahydyrova/board-project2/board-project/src/containers/boards/BoardsContainer.js"],"names":["React","useState","useEffect","db","Board","BoardsForm","Container","Row","Col","Card","Loading","byTitle","byTitleD","byDate","byDateD","BoardsContainer","boards","setBoards","isLoading","setIsLoading","sortedBy","setSortedBy","collection","orderBy","onSnapshot","snapshot","docChanges","length","forEach","change","type","prevBoards","doc","data","id","newArrBoards","index","findIndex","el","splice","sort","map","title","items"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport db from \"../../firebaseConfig\";\nimport Board from \"../../components/board/Board\";\nimport BoardsForm from \"../../components/boardForm/BoardForm\";\nimport { Container } from \"react-bootstrap\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"antd/dist/antd.css\";\nimport {Card} from \"antd\"\nimport Loading from \"../../components/board/Loading\"\nimport {byTitle, byTitleD, byDate, byDateD} from \"../../functions\"\n\nconst BoardsContainer = () => {\n  const [boards, setBoards] = useState([]);\n  const [isLoading, setIsLoading] = useState(true)\n  const [sortedBy, setSortedBy] = useState(\"title\")\n\n  useEffect(() => {\n    return db.collection(\"boards\").orderBy(sortedBy).onSnapshot((snapshot) => {\n      if (snapshot.docChanges().length === 0){\n        setIsLoading(false)\n      }\n      snapshot.docChanges().forEach((change) => {\n        if (change.type === \"added\") {\n          setBoards((prevBoards) => [\n            ...prevBoards,\n            { ...change.doc.data(), id: change.doc.id },\n          ]);\n          setIsLoading(false)\n        }\n        if (change.type === \"modified\") {\n          setBoards((prevBoards) => {\n            const newArrBoards = [...prevBoards];\n            let index = newArrBoards.findIndex((el) => el.id === change.doc.id);\n            if (index !== -1) {\n              newArrBoards[index] = {\n                ...change.doc.data(),\n                id: change.doc.id,\n              };\n            }\n            return newArrBoards;\n          });\n          setIsLoading(false)\n        }\n        if (change.type === \"removed\") {\n          setBoards((prevBoards) => {\n            const newArrBoards = [...prevBoards];\n            let index = newArrBoards.findIndex((el) => el.id === change.doc.id);\n\n            if (index !== -1) {\n              newArrBoards.splice(index, 1);\n            }\n            return newArrBoards;\n          });\n          \n        }\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n\n    switch(sortedBy){\n      case \"title\":\n        setBoards(boards.sort(byTitle))\n        break\n      case \"dTitle\":\n          setBoards(boards.sort(byTitleD))\n          break\n      case \"date\":\n        setBoards(boards.sort(byDate))\n        break\n      case \"dDate\":\n        setBoards(boards.sort(byDateD))\n        break\n      default:\n        setBoards(boards.sort(byDateD))\n    }\n  }, [sortedBy])\n  // const noData = () => {\n  //   if (boards.length === 0) {\n  //     setIsLoading(null)\n  //   }\n  // }\n\n  return (\n    <div>\n      {/* <Container>\n        <Row style={{display:\"flex\", justifyContent: \"center\"}}>\n          {isLoading? <Loading />: null}\n          {/* {setTimeout(noData, 4000)} */}\n        {/* </Row> */} */}\n        <Row>\n          {boards.map((el) => {\n            return (\n              <Board\n                key={el.id}\n                boardTitle={el.title}\n                boardsItems={el.items ? el.items : []}\n                boardsId={el.id}\n              />\n            );\n          })}\n          </Row>\n          {/* <Col>\n            {!isLoading? <BoardsForm sortBoards={setSortedBy}/>: null}\n          </Col>\n        \n          \n      </Container> */}\n    </div>\n  );\n};\n\nexport default BoardsContainer;\n\n\n\n\n// function byTitle( a, b ) {\n//   if ( a.title < b.title ){\n//     return -1;\n//   }\n//   if ( a.title > b.title){\n//     return 1;\n//   }\n//   return 0;\n// }\n\n// function byTitleD( a, b ) {\n//   if ( a.title < b.title ){\n//     return 1;\n//   }\n//   if ( a.title > b.title){\n//     return -1;\n//   }\n//   return 0;\n// }\n\n// function byDate( a, b ) {\n//   if ( a.date < b.date ){\n//     return -1;\n//   }\n//   if ( a.date > b.date){\n//     return 1;\n//   }\n//   return 0;\n// }\n\n// function byDateD( a, b ) {\n//   if ( a.date < b.date ){\n//     return 1;\n//   }\n//   if ( a.date > b.date){\n//     return -1;\n//   }\n//   return 0;\n// }"]},"metadata":{},"sourceType":"module"}