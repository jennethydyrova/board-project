{"ast":null,"code":"var _jsxFileName = \"/Users/dzennetahydyrova/board-project2/board-project/src/containers/boards/BoardsContainer.js\";\nimport React, { useState, useEffect } from \"react\";\nimport db from \"../../firebaseConfig\";\nimport Board from \"../../components/board/Board\";\nimport BoardsForm from \"../../components/boardForm/BoardForm\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"antd/dist/antd.css\";\nimport { Card, List, Switch } from \"antd\";\nimport { byTitle, byTitleD, byDate, byDateD } from \"../../functions\";\nimport SortBy from '../../components/sortBy/SortBy';\nimport ListView from '../../components/listView';\n\nconst BoardsContainer = () => {\n  const [boards, setBoards] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [sortedBy, setSortedBy] = useState(\"\");\n  const [listView, setListView] = useState(true);\n\n  const sortBoards = sortedBy => {\n    console.log(sortedBy);\n\n    switch (sortedBy) {\n      case \"2\":\n        setBoards(prevBoards => {\n          const newBoards = [...prevBoards];\n          let newBoard = newBoards.sort(byTitle);\n          return newBoard;\n        });\n        break;\n\n      case \"4\":\n        setBoards(prevBoards => {\n          const newBoards = [...prevBoards];\n          let newBoard = newBoards.sort(byTitleD);\n          return newBoard;\n        });\n        break;\n\n      case \"1\":\n        setBoards(prevBoards => {\n          const newBoards = [...prevBoards];\n          let newBoard = newBoards.sort(byDate);\n          return newBoard;\n        });\n        break;\n\n      case \"3\":\n        setBoards(prevBoards => {\n          const newBoards = [...prevBoards];\n          let newBoard = newBoards.sort(byDateD);\n          return newBoard;\n        });\n        break;\n\n      default:\n        setBoards(prevBoards => {\n          const newBoards = [...prevBoards];\n          let newBoard = newBoards.sort(byTitle);\n          return newBoard;\n        });\n    }\n  };\n\n  useEffect(() => {\n    return db.collection(\"boards\").onSnapshot(snapshot => {\n      if (snapshot.docChanges().length === 0) {\n        setIsLoading(false);\n      }\n\n      snapshot.docChanges().forEach(change => {\n        if (change.type === \"added\") {\n          setBoards(prevBoards => [...prevBoards, { ...change.doc.data(),\n            id: change.doc.id\n          }]);\n          setIsLoading(false);\n        }\n\n        if (change.type === \"modified\") {\n          setBoards(prevBoards => {\n            const newArrBoards = [...prevBoards];\n            let index = newArrBoards.findIndex(el => el.id === change.doc.id);\n\n            if (index !== -1) {\n              newArrBoards[index] = { ...change.doc.data(),\n                id: change.doc.id\n              };\n            }\n\n            return newArrBoards;\n          });\n          setIsLoading(false);\n        }\n\n        if (change.type === \"removed\") {\n          setBoards(prevBoards => {\n            const newArrBoards = [...prevBoards];\n            let index = newArrBoards.findIndex(el => el.id === change.doc.id);\n\n            if (index !== -1) {\n              newArrBoards.splice(index, 1);\n            }\n\n            return newArrBoards;\n          });\n        }\n      });\n    });\n  }, []);\n\n  const handleChange = () => {\n    setListView(!listView);\n  };\n\n  const gridStyle = {\n    margin: '15px',\n    width: '30%'\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"content-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BoardsForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    onChange: e => handleChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SortBy, {\n    sortBoards: sortBoards,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, listView ? boards.map(el => {\n    return /*#__PURE__*/React.createElement(Card.Grid, {\n      style: gridStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      key: el.id,\n      boardTitle: el.title,\n      boardsItems: el.items ? el.items : [],\n      boardsId: el.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }));\n  }) : boards.map(el => {\n    return /*#__PURE__*/React.createElement(List.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(ListView, {\n      key: el.id,\n      boardTitle: el.title,\n      boardsItems: el.items ? el.items : [],\n      boardsId: el.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }));\n  })));\n};\n\nexport default BoardsContainer; // function byTitle( a, b ) {\n//   if ( a.title < b.title ){\n//     return -1;\n//   }\n//   if ( a.title > b.title){\n//     return 1;\n//   }\n//   return 0;\n// }\n// function byTitleD( a, b ) {\n//   if ( a.title < b.title ){\n//     return 1;\n//   }\n//   if ( a.title > b.title){\n//     return -1;\n//   }\n//   return 0;\n// }\n// function byDate( a, b ) {\n//   if ( a.date < b.date ){\n//     return -1;\n//   }\n//   if ( a.date > b.date){\n//     return 1;\n//   }\n//   return 0;\n// }\n// function byDateD( a, b ) {\n//   if ( a.date < b.date ){\n//     return 1;\n//   }\n//   if ( a.date > b.date){\n//     return -1;\n//   }\n//   return 0;\n// }","map":{"version":3,"sources":["/Users/dzennetahydyrova/board-project2/board-project/src/containers/boards/BoardsContainer.js"],"names":["React","useState","useEffect","db","Board","BoardsForm","Row","Col","Card","List","Switch","byTitle","byTitleD","byDate","byDateD","SortBy","ListView","BoardsContainer","boards","setBoards","isLoading","setIsLoading","sortedBy","setSortedBy","listView","setListView","sortBoards","console","log","prevBoards","newBoards","newBoard","sort","collection","onSnapshot","snapshot","docChanges","length","forEach","change","type","doc","data","id","newArrBoards","index","findIndex","el","splice","handleChange","gridStyle","margin","width","e","map","title","items"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport db from \"../../firebaseConfig\";\nimport Board from \"../../components/board/Board\";\nimport BoardsForm from \"../../components/boardForm/BoardForm\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"antd/dist/antd.css\";\nimport {Card, List, Switch} from \"antd\"\nimport {byTitle, byTitleD, byDate, byDateD} from \"../../functions\"\nimport SortBy from '../../components/sortBy/SortBy'\nimport ListView from '../../components/listView'\n\n\nconst BoardsContainer = () => {\n  const [boards, setBoards] = useState([]);\n  const [isLoading, setIsLoading] = useState(true)\n  const [sortedBy, setSortedBy] = useState(\"\")\n  const [listView, setListView] = useState(true)\n\n\n  const sortBoards = (sortedBy) => {\n    console.log(sortedBy)\n    switch(sortedBy){\n      case \"2\":\n        setBoards((prevBoards) => {\n          const newBoards = [...prevBoards];\n          let newBoard = newBoards.sort(byTitle)\n          return newBoard\n        })\n          break\n      case \"4\":\n        setBoards((prevBoards) => {\n          const newBoards = [...prevBoards];\n          let newBoard = newBoards.sort(byTitleD)\n          return newBoard\n        })\n          break\n      case \"1\":\n        setBoards((prevBoards) => {\n          const newBoards = [...prevBoards];\n          let newBoard = newBoards.sort(byDate)\n          return newBoard\n        })\n          break\n      case \"3\":\n        setBoards((prevBoards) => {\n          const newBoards = [...prevBoards];\n          let newBoard = newBoards.sort(byDateD)\n          return newBoard\n        })\n          break\n      default:\n        setBoards((prevBoards) => {\n          const newBoards = [...prevBoards];\n          let newBoard = newBoards.sort(byTitle)\n          return newBoard\n        })\n    }\n  }\n\n  useEffect(() => {\n    return db.collection(\"boards\").onSnapshot((snapshot) => {\n      if (snapshot.docChanges().length === 0){\n        setIsLoading(false)\n      }\n      snapshot.docChanges().forEach((change) => {\n        if (change.type === \"added\") {\n          setBoards((prevBoards) => [\n            ...prevBoards,\n            { ...change.doc.data(), id: change.doc.id },\n          ]);\n          setIsLoading(false)\n        }\n        if (change.type === \"modified\") {\n          setBoards((prevBoards) => {\n            const newArrBoards = [...prevBoards];\n            let index = newArrBoards.findIndex((el) => el.id === change.doc.id);\n            if (index !== -1) {\n              newArrBoards[index] = {\n                ...change.doc.data(),\n                id: change.doc.id,\n              };\n            }\n            return newArrBoards;\n          });\n          setIsLoading(false)\n        }\n        if (change.type === \"removed\") {\n          setBoards((prevBoards) => {\n            const newArrBoards = [...prevBoards];\n            let index = newArrBoards.findIndex((el) => el.id === change.doc.id);\n\n            if (index !== -1) {\n              newArrBoards.splice(index, 1);\n            }\n            return newArrBoards;\n          });\n          \n        }\n      });\n    });\n  }, []);\n\n\n const handleChange = () => {\n    setListView(!listView)\n  }\n\n  const gridStyle = {\n    margin: '15px',\n    width: '30%'\n  }\n\n  return (\n    <div>\n      <Row className=\"content-header\">\n        <Col>\n          <Col>\n            <BoardsForm />\n          </Col>\n          <Col>\n            <Switch onChange={(e) => handleChange(e)} />\n          </Col>\n          <Col>\n            <SortBy sortBoards={sortBoards}/>\n          </Col>\n        </Col>\n      </Row>\n        <Row>\n{ listView ? \n    boards.map((el) => {\n            return (\n              <Card.Grid style={gridStyle}>\n                <Board\n                  key={el.id}\n                  boardTitle={el.title}\n                  boardsItems={el.items ? el.items : []}\n                  boardsId={el.id}\n                />\n               </Card.Grid>\n            )\n          })\n            :\n           boards.map((el) => {\n            return (\n              <List.Item >\n                <ListView\n                  key={el.id}\n                  boardTitle={el.title}\n                  boardsItems={el.items ? el.items : []}\n                  boardsId={el.id}\n                />\n               </List.Item>\n            );\n          })\n        }\n        </Row>\n\n    </div>\n  );\n};\n\nexport default BoardsContainer;\n\n\n\n\n// function byTitle( a, b ) {\n//   if ( a.title < b.title ){\n//     return -1;\n//   }\n//   if ( a.title > b.title){\n//     return 1;\n//   }\n//   return 0;\n// }\n\n// function byTitleD( a, b ) {\n//   if ( a.title < b.title ){\n//     return 1;\n//   }\n//   if ( a.title > b.title){\n//     return -1;\n//   }\n//   return 0;\n// }\n\n// function byDate( a, b ) {\n//   if ( a.date < b.date ){\n//     return -1;\n//   }\n//   if ( a.date > b.date){\n//     return 1;\n//   }\n//   return 0;\n// }\n\n// function byDateD( a, b ) {\n//   if ( a.date < b.date ){\n//     return 1;\n//   }\n//   if ( a.date > b.date){\n//     return -1;\n//   }\n//   return 0;\n// }"]},"metadata":{},"sourceType":"module"}