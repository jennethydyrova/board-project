{"ast":null,"code":"var _jsxFileName = \"/Users/dzennetahydyrova/board-project2/board-project/src/components/completed/index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport db from \"../../firebaseConfig\";\nimport Item from \"../item/Item\";\nimport ItemForm from \"../item/ItemForm\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport { Collapse } from \"antd\";\nimport * as firebase from \"firebase/app\";\nimport { Card, Row, Col } from 'antd'; // import SortItemsBy from \"../../components/item/SortItemsBy\"\n// import {byTitle, byTitleD, byDeadline, byDeadlineD} from \"../../functions\"\n\nconst CompletedTasks = () => {\n  const [completedTaskList, setCompletedTaskList] = useState([]);\n  const {\n    Panel\n  } = Collapse;\n  const [modalOpened, setModalOpened] = useState({\n    modalOpen: false\n  });\n\n  const fetchCompletedTasks = async () => {\n    const res = await db.collection(\"boards\").get();\n    const data = res.docs;\n\n    for (let i = 0; i < data.length; i++) {\n      // if (data[i].data())\n      setCompletedTaskList(prevState => [...prevState, { ...data[i].data(),\n        id: data[i].id\n      }]);\n      console.log(data[i].data());\n    }\n\n    return completedTaskList;\n  };\n\n  useEffect(() => {\n    fetchCompletedTasks();\n  }, []);\n  console.log(completedTaskList); // const handleClick = (e) => {\n  //   db.collection(\"boards\")\n  //     .doc(boardsId)\n  //     .update({\n  //       items: firebase.firestore.FieldValue.arrayRemove(task),\n  //     });\n  // };\n\n  const handleModal = () => {\n    setModalOpened({\n      modalOpen: modalOpened.modalOpen === true ? false : true\n    });\n  };\n\n  const gridStyle = {\n    width: '25%',\n    textAlign: 'center',\n    margin: '10px'\n  };\n  return completedTaskList.map(item => {\n    return /*#__PURE__*/React.createElement(Collapse, {\n      style: {\n        width: \"100%\"\n      },\n      defaultActiveKey: [\"1\"],\n      className: \"completed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Panel, {\n      header: item.title,\n      key: item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 2\n      }\n    }, item.items.filter(el => el.completed === true).map(el => {\n      return /*#__PURE__*/React.createElement(Card.Grid, {\n        className: \"completed-card\",\n        title: el.title,\n        style: gridStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 3\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 5\n        }\n      }, \"Title: \", el.title), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 5\n        }\n      }, \"Assigner: \", el.assigner), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 5\n        }\n      }, \"Assignee: \", el.assignee), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 5\n        }\n      }, \"Due date: \", el.due));\n    })));\n  });\n};\n\nexport default CompletedTasks;","map":{"version":3,"sources":["/Users/dzennetahydyrova/board-project2/board-project/src/components/completed/index.js"],"names":["React","useState","useEffect","db","Item","ItemForm","DeleteOutlined","Collapse","firebase","Card","Row","Col","CompletedTasks","completedTaskList","setCompletedTaskList","Panel","modalOpened","setModalOpened","modalOpen","fetchCompletedTasks","res","collection","get","data","docs","i","length","prevState","id","console","log","handleModal","gridStyle","width","textAlign","margin","map","item","title","items","filter","el","completed","assigner","assignee","due"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport db from \"../../firebaseConfig\";\nimport Item from \"../item/Item\";\nimport ItemForm from \"../item/ItemForm\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport { Collapse } from \"antd\";\n\nimport * as firebase from \"firebase/app\";\nimport { Card, Row, Col } from 'antd';\n// import SortItemsBy from \"../../components/item/SortItemsBy\"\n// import {byTitle, byTitleD, byDeadline, byDeadlineD} from \"../../functions\"\n\nconst CompletedTasks = () => {\n const [completedTaskList, setCompletedTaskList] = useState([])\n const { Panel } = Collapse;\n const [modalOpened, setModalOpened] = useState({ modalOpen: false });\n\n  const fetchCompletedTasks = async() => {\n    const res = await db.collection(\"boards\").get();\n    const data = res.docs;\n    for (let i = 0; i < data.length; i++) {\n      // if (data[i].data())\n      setCompletedTaskList((prevState) => [...prevState, {...data[i].data(), id: data[i].id}]);\n      console.log(data[i].data());\n    }\n    return completedTaskList\n  }\n useEffect(() => {\n  fetchCompletedTasks()\n }, [])\n\nconsole.log(completedTaskList)\n// const handleClick = (e) => {\n//   db.collection(\"boards\")\n//     .doc(boardsId)\n//     .update({\n//       items: firebase.firestore.FieldValue.arrayRemove(task),\n//     });\n// };\n\nconst handleModal = () => {\n  setModalOpened({\n    modalOpen: modalOpened.modalOpen === true ? false : true,\n  });\n};\n\n\nconst gridStyle = {\n  width: '25%',\n  textAlign: 'center',\n  margin: '10px'\n};\n\n\n  \n  return (\ncompletedTaskList.map((item) => {\n  return (\n    <Collapse style={{ width: \"100%\" }} defaultActiveKey={[\"1\"]} className=\"completed\">\n <Panel  header={item.title} key={item.id}>\n   \n{item.items.filter((el) => el.completed === true ).map((el) => {\nreturn (\n  <Card.Grid className= \"completed-card\" title={el.title} style={gridStyle}>\n    <p>Title: {el.title}</p>\n    <p>Assigner: {el.assigner}</p>\n    <p>Assignee: {el.assignee}</p>\n    <p>Due date: {el.due}</p>\n   \n    \n  </Card.Grid>\n)\n\n  \n  \n})}\n</Panel>\n</Collapse>\n  )\n})\n  );\n};\n\n\n\n\n\n\n\nexport default CompletedTasks;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}